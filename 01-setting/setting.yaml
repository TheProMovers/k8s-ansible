---
- name: setting k8s cluster
  hosts: allServers
  become: yes
  vars_files:
    - /root/PXE-Ansible-k8s-automation/inventory/vars.yaml
  tasks:
    - name: stop firewalld
      service:
        name: firewalld
        state: stopped
        enabled: no

    - name: set SELinux to permissive
      command: setenforce 0

    - name: set SELinux to permissive permanently
      lineinfile:
        path: /etc/selinux/config
        regexp: '^SELINUX='
        line: 'SELINUX=permissive'
        backrefs: yes

    - name: Configure eth1 with nmcli
      community.general.nmcli:
        conn_name: "eth1"
        ifname: "eth1"
        type: "ethernet"
        ip4: "{{ k8s_nodes[inventory_hostname].ip_eth1 }}/{{ k8s_nodes[inventory_hostname].prefix_eth1 }}"
        gw4: "{{ k8s_nodes[inventory_hostname].gw_eth1 }}"
        autoconnect: yes
        state: present

    - name: Configure eth2 with nmcli
      community.general.nmcli:
        conn_name: "eth2"
        ifname: "eth2"
        type: "ethernet"
        ip4: "{{ k8s_nodes[inventory_hostname].ip_eth2 }}/{{ k8s_nodes[inventory_hostname].prefix_eth2 }}"
        gw4: "{{ k8s_nodes[inventory_hostname].gw_eth2 }}"
        autoconnect: yes
        state: present

    - name: swap off
      command: swapoff -a

    - name: swap off permanently
      lineinfile:
        path: /etc/fstab
        regexp: '^\/dev\/mapper\/rl-swap'
        line: '#\/dev\/mapper\/rl-swap     none                    swap    defaults        0 0'
        backrefs: yes

    - name: daemon-reload
      systemd:
        daemon_reload: yes

    - name: Create sysctl config file
      copy:
        dest: /etc/sysctl.d/k8s-mod.conf
        content: |
          net.bridge.bridge-nf-call-iptables=1
          net.ipv4.ip_forward=1
          net.bridge.bridge-nf-call-ip6tables=1
        owner: root
        group: root
        mode: '0644'

    - name: apply sysctl config
      command: sysctl --system -q

    - name: Create module config file
      copy:
        dest: /etc/modules-load.d/k8s-modules.conf
        content: |
          br_netfilter
          overlay
        owner: root
        group: root
        mode: '0644'

    - name: apply br_netfilter
      command: modprobe br_netfilter
    - name: apply overlay
      command: modprobe overlay

    - name: configure hosts file
      lineinfile:
        path: /etc/hosts
        line: "{{ item }}"
        create: yes
      loop:
        - "192.168.0.134 haproxy1.example.com haproxy1"
        - "192.168.0.135 haproxy2.example.com haproxy2"
        - "192.168.0.136 dns.example.com dns"
        - "192.168.0.137 storage.example.com storage"
        - "192.168.0.138 db.example.com db"
        - "192.168.0.120 controller1.example.com controller1"
        - "192.168.0.121 controller2.example.com controller2"
        - "192.168.0.122 controller3.example.com controller3"
        - "192.168.0.125 compute1.example.com compute1"
        - "192.168.0.126 compute2.example.com compute2"
        - "192.168.0.127 compute3.example.com compute3"

